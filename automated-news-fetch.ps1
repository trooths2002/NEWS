# Automated Daily News Fetch Script
# This script runs daily to fetch and organize news headlines
# Integrates with MCP SuperAssistant workflow

param(
    [int]$HeadlineCount = 20,
    [string]$OutputDir = ".\news-archive",
    [switch]$SendNotification
)

$Date = Get-Date -Format "yyyy-MM-dd"
$TimeStamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

Write-Host "üóûÔ∏è  Starting Daily News Fetch - $TimeStamp" -ForegroundColor Green

# Ensure output directory exists
if (!(Test-Path $OutputDir)) {
    New-Item -ItemType Directory -Path $OutputDir -Force
    Write-Host "üìÅ Created archive directory: $OutputDir" -ForegroundColor Yellow
}

# Check if MCP server is running
try {
    Invoke-RestMethod -Uri "http://localhost:3006/health" -Method GET -TimeoutSec 5 | Out-Null
    $ServerCheck = $true
} catch {
    $ServerCheck = $false
}

if (-not $ServerCheck) {
    Write-Host "‚ùå MCP Server not running. Starting server..." -ForegroundColor Red
    
    # Start MCP server in background
    Start-Process -FilePath "node" -ArgumentList "mcp-sse-server.js" -WindowStyle Hidden -WorkingDirectory $PWD
    Start-Sleep -Seconds 5
    
    # Verify server started
    try {
        Invoke-RestMethod -Uri "http://localhost:3006/health" -Method GET -TimeoutSec 5 | Out-Null
        $ServerCheck = $true
    } catch {
        $ServerCheck = $false
    }
    
    if (-not $ServerCheck) {
        Write-Host "‚ùå Failed to start MCP server. Exiting." -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ MCP Server started successfully" -ForegroundColor Green
}

# Create daily news request
$NewsRequest = @{
    jsonrpc = "2.0"
    method = "tools/call"
    params = @{
        name = "fetch_news"
        arguments = @{ limit = $HeadlineCount }
    }
    id = 1
} | ConvertTo-Json -Depth 10

# Fetch news headlines
try {
    Write-Host "üì° Fetching $HeadlineCount headlines..." -ForegroundColor Cyan
    
    $headers = @{
        'Content-Type' = 'application/json'
        'Accept' = 'application/json, text/event-stream'
    }
    
    $response = Invoke-RestMethod -Uri "http://localhost:3006/sse" -Method POST -Body $NewsRequest -Headers $headers -TimeoutSec 30
    
    if ($response.result -and $response.result.content) {
        $headlines = $response.result.content[0].text
        
        # Save to daily file
        $dailyFile = Join-Path $OutputDir "daily-news-$Date.txt"
        $content = @"
Daily News Headlines - $Date
Generated at: $TimeStamp
Source: AllAfrica.com via MCP News Fetcher
Headlines fetched: $HeadlineCount

$headlines

---
Generated by Automated Daily News Fetch Script
MCP SuperAssistant Integration
"@
        
        $content | Out-File -FilePath $dailyFile -Encoding UTF8
        Write-Host "üíæ Headlines saved to: $dailyFile" -ForegroundColor Green
        
        # Create summary
        $headlineLines = $headlines -split '\n' | Where-Object { $_ -match '^\d+\.' }
        $summaryFile = Join-Path $OutputDir "summary-$Date.txt"
        
        $summary = @"
Daily News Summary - $Date

Total Headlines: $($headlineLines.Count)
Fetch Time: $TimeStamp
Status: Success

Top 5 Headlines:
$($headlineLines[0..4] -join "`n")

Full report: $dailyFile
"@
        
        $summary | Out-File -FilePath $summaryFile -Encoding UTF8
        Write-Host "üìã Summary saved to: $summaryFile" -ForegroundColor Green
        
        # Send notification if requested
        if ($SendNotification) {
            $notificationTitle = "Daily News Fetch Complete"
            $notificationMessage = "Fetched $($headlineLines.Count) headlines. Saved to $dailyFile"
            
            # Windows 10/11 toast notification
            try {
                Add-Type -AssemblyName System.Windows.Forms
                $notification = New-Object System.Windows.Forms.NotifyIcon
                $notification.Icon = [System.Drawing.SystemIcons]::Information
                $notification.BalloonTipTitle = $notificationTitle
                $notification.BalloonTipText = $notificationMessage
                $notification.Visible = $true
                $notification.ShowBalloonTip(5000)
                Start-Sleep -Seconds 2
                $notification.Dispose()
                
                Write-Host "üîî Notification sent" -ForegroundColor Yellow
            } catch {
                Write-Host "‚ö†Ô∏è  Could not send notification: $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
        
        Write-Host "‚úÖ Daily news fetch completed successfully!" -ForegroundColor Green
        Write-Host "üìä Headlines processed: $($headlineLines.Count)" -ForegroundColor Cyan
        
    } else {
        throw "Invalid response format from MCP server"
    }
    
} catch {
    Write-Host "‚ùå Error fetching news: $($_.Exception.Message)" -ForegroundColor Red
    
    # Log error
    $errorLog = Join-Path $OutputDir "error-log.txt"
    $errorEntry = "$TimeStamp - Error: $($_.Exception.Message)`n"
    Add-Content -Path $errorLog -Value $errorEntry
    
    exit 1
}

# Cleanup old files (keep last 30 days)
$cutoffDate = (Get-Date).AddDays(-30)
Get-ChildItem -Path $OutputDir -Filter "daily-news-*.txt" | 
    Where-Object { $_.CreationTime -lt $cutoffDate } | 
    ForEach-Object {
        Remove-Item $_.FullName -Force
        Write-Host "üóëÔ∏è  Removed old file: $($_.Name)" -ForegroundColor DarkGray
    }

Write-Host "üéâ Daily news workflow completed at $(Get-Date -Format 'HH:mm:ss')" -ForegroundColor Green